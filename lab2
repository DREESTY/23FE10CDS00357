Lab 2: In this lab class students will familiarize with the numpy, matplotlib and pandas library of Python 
Program 1: Slice elements from index 4 to the end of the array using numpy library
From an array, 
a.	Print elements from index 4 onwards
b.	Print elements till index 4
c.	Print from the index 3 from the end to index 1 from the end
d.	Print every other element from index 1 to index 5.
e.	Print every other element from the entire array
From an 2D array, produce output, 
a.	From the second element, slice elements from index 1 to index 4
b.	From both elements, return index 2
c.	From both elements, slice index 1 to index 4

import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7])

print(arr)
print("arr[4:]  ", arr[4:]) #Slice elements from index 4 to the end of the array: OUTPUT: [5 6 7]

print("arr[:4]  ",arr[:4]) #Slice elements from the beginning to index 4 (not included):  OUTPUT: [1 2 3 4]

print("arr[-3:-1]  ", arr[-3:-1]) #Slice from the index 3 from the end to index 1 from the end: OUTPUT: [5 6]

print("arr[1:5:2] ", arr[1:5:2]) #Return every other element from index 1 to index 5: OUTPUT: [2 4]

print("arr[::2])  ",arr[::2])  #Return every other element from the entire array: OUTPUT: [1 3 5 7]


#  2D array slicing

print("\n2D Array Slicing \n")

arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])

print("2d Array: \n", arr, "\n")

print("arr[1, 1:4] ",arr[1, 1:4]) #From the second element, slice elements from index 1 to index 4 (not included): 
OUTPUT: [7 8 9]

print("arr[0:2, 2] " , arr[0:2, 2]) #From both elements, return index 2: OUTPUT: [3 8]

print(" arr[0:2, 1:4] \n", arr[0:2, 1:4]) #From both elements, slice index 1 to index 4 (not included), this will return a 2-D array: 
OUTPUT: 
[[2 3 4]
 [7 8 9]]

Program 2: Write python code to create an 2D array then short them along different axis. Then create a tuple and short them by attribute name. 

import numpy as np

a = np.array([[1, 4, 2],
                 [3, 4, 6],
              [0, -1, 5]])

# sorted array
print ("Array elements in sorted order:\n",
                    np.sort(a, axis = None))

# sort array row-wise
print ("Row-wise sorted array:\n",
                np.sort(a, axis = 1))

# specify sort algorithm
print ("Column wise sort by applying merge-sort:\n",
            np.sort(a, axis = 0, kind = 'mergesort'))

# Example to show sorting of structured array
# set alias names for dtypes
dtypes = [('name', 'S10'), ('grad_year', int), ('cgpa', float)]

# Values to be put in array
values = [('Hrithik', 2009, 8.5), ('Ajay', 2008, 8.7), 
           ('Pankaj', 2008, 7.9), ('Aakash', 2009, 9.0)]

print("values : ", values)           
# Creating array
arr = np.array(values, dtype = dtypes)
print ("\nArray sorted by names:\n",
            np.sort(arr, order = 'name'))
            
print ("Array sorted by graduation year and then cgpa:\n",
                np.sort(arr, order = ['grad_year', 'cgpa']))

Program 3: Program to matplotlib on Titanic dataset. 
Using pandas, matplotlib and seaborn libraries of Python, access the Titanic dataset and plot graphs 
a.	Bar graph of survival count
b.	Histogram of passenger age
c.	Pie chart of class distribution
d.	Box plot of age by gender
e.	Scatter plot of fare vs age
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Titanic dataset
titanic = sns.load_dataset('titanic')


# Bar plot of survival count
survival_count = titanic['survived'].value_counts()

plt.figure(figsize=(6, 4))
plt.bar(survival_count.index, survival_count.values, color=['lightcoral', 'skyblue'])
plt.title('Survival Count')
plt.xlabel('Survived')
plt.ylabel('Number of Passengers')
plt.xticks([0, 1], ['Did Not Survive', 'Survived'])
plt.show()



# Histogram of passenger age
plt.figure(figsize=(8, 6))
plt.hist(titanic['age'].dropna(), bins=30, color='lightseagreen', edgecolor='black')
plt.title('Distribution of Passenger Ages')
plt.xlabel('Age')
plt.ylabel('Number of Passengers')
plt.show()

# Pie chart of class distribution
class_count = titanic['class'].value_counts()

plt.figure(figsize=(6, 6))
plt.pie(class_count, labels=class_count.index, autopct='%1.1f%%', startangle=140, colors=['gold', 'lightblue', 'lightgreen'])
plt.title('Class Distribution of Passengers')
plt.show()


# Box plot of age by gender
plt.figure(figsize=(8, 6))
sns.boxplot(x='sex', y='age', data=titanic, palette='pastel')
plt.title('Age Distribution by Gender')
plt.xlabel('Gender')
plt.ylabel('Age')
plt.show()


# Scatter plot of fare vs age
plt.figure(figsize=(10, 6))
plt.scatter(titanic['age'], titanic['fare'], c=titanic['survived'], cmap='coolwarm', edgecolor='black', alpha=0.7)
plt.title('Fare vs Age (Colored by Survival)')
plt.xlabel('Age')
plt.ylabel('Fare')
plt.colorbar(label='Survived')
plt.show()
  

   
 
