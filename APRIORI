1.	Write a program to implement Apriori algorithm 
def apriori(transactions, min_support):
    def get_support(itemset, transactions):
        count = 0
        for transaction in transactions:
            if itemset.issubset(transaction):
                count += 1
        return count

    def generate_candidates(prev_freq_itemsets, k):
        candidates = set()
        prev_freq_itemsets = list(prev_freq_itemsets)
        for i in range(len(prev_freq_itemsets)):
            for j in range(i + 1, len(prev_freq_itemsets)):
                candidate = prev_freq_itemsets[i].union(prev_freq_itemsets[j])
                if len(candidate) == k:
                    candidates.add(candidate)
        return candidates

    def filter_candidates(candidates, transactions, min_support):
        freq_itemsets = {}
        for candidate in candidates:
            support = get_support(candidate, transactions)
            if support >= min_support:
                freq_itemsets[frozenset(candidate)] = support
        return freq_itemsets

    # Convert transactions to list of sets for easier manipulation
    transactions = list(map(set, transactions))

    # Step 1: Generate frequent 1-itemsets
    # Create a set of unique items
    items = set()
    for transaction in transactions:
        for item in transaction:
            items.add(item)

    # Create a list of single-item sets (candidates)
    candidates = [{item} for item in items]

    freq_itemsets = filter_candidates(candidates, transactions, min_support)

    k = 2
    all_freq_itemsets = freq_itemsets.copy()

    # Step 2: Generate frequent k-itemsets
    while freq_itemsets:
        candidates = generate_candidates(freq_itemsets.keys(), k)
        freq_itemsets = filter_candidates(candidates, transactions, min_support)
        all_freq_itemsets.update(freq_itemsets)
        k += 1

    return all_freq_itemsets

# Example usage:
transactions = [
    ['milk', 'bread', 'butter'],
    ['beer', 'bread'],
    ['milk', 'bread', 'beer'],
    ['milk', 'butter'],
    ['beer', 'butter'],
]

min_support = 2

freq_itemsets = apriori(transactions, min_support)

for itemset, support in freq_itemsets.items():
    print(f'Itemset: {set(itemset)}, Support: {support}')

2.	Find frequent itemset through Apriori algorithm. Use library. 
# Import necessary libraries
from mlxtend.frequent_patterns import apriori
import pandas as pd

# Sample transactions (binary encoded)
transactions = [
    ['milk', 'bread', 'butter'],
    ['beer', 'bread'],
    ['milk', 'bread', 'beer'],
    ['milk', 'butter'],
    ['beer', 'butter']
]

# Convert transactions into a one-hot encoded DataFrame
all_items = sorted({item for transaction in transactions for item in transaction})

# Create the one-hot encoded DataFrame
encoded_transactions = []
for transaction in transactions:
    encoded_transactions.append([1 if item in transaction else 0 for item in all_items])

df = pd.DataFrame(encoded_transactions, columns=all_items)

# Apply the Apriori algorithm to find frequent itemsets
min_support = 0.4  # Set minimum support
frequent_itemsets = apriori(df, min_support=min_support, use_colnames=True)

# Display the frequent itemsets
print("Frequent Itemsets:")
print(frequent_itemsets)

3.	Write a program to find all the association rule using apriori algorithm from the given dataset. You can use python library
# !pip install apyori			(If apyori is not installed)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from apyori import apriori

store_data = pd.read_csv("apriori_store_data.csv", header=None)
display(store_data.head())
print(store_data.shape)

records = []
for i in range(1, 7501):
    records.append([str(store_data.values[i, j]) for j in range(0, 20)])

print(type(records))

association_rules = apriori(records, min_support=0.0045, min_confidence=0.2, min_lift=3, min_length=2)
association_results = list(association_rules)

print("There are {} Relation derived.".format(len(association_results)))

for i in range(0, len(association_results)):
    print(association_results[i][0])

for item in association_results:
    # first index of the inner list
    # Contains base item and add item
    pair = item[0]
    items = [x for x in pair]
    print("Rule: " + items[0] + " -> " + items[1])

    # second index of the inner list
    print("Support: " + str(item[1]))

    # third index of the list located at 0th
    # of the third index of the inner list

    print("Confidence: " + str(item[2][0][2]))
    print("Lift: " + str(item[2][0][3]))
    print("=====================================")

